# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2021 - 2022 Xilinx, Inc. All rights reserved.

TE_PLATFORM([], [], [-D_GNU_SOURCE], [], [],
            [logger_core tools logic_expr conf_oid rpcxdr rpc_types \
             ipc bsapi loggerten rcfapi confapi comm_net_engine rcfunix \
             tapi rcfrpc tapi_env tapi_rpc tapi_tad trc log_proc asn ndn \
             tapi_bpf tapi_job tapi_tool])

TE_LIB_PARMS([rpcxdr], [], [],
             [--with-rpcdefs=${TE_BASE}/lib/rpcxdr/tarpc_job.x.m4])

TE_TOOLS([rgt trc])

TE_TOOL_PARMS([trc], [--with-popups --with-log-urls])

TE_LIB_PARMS([tapi_tad], [], [],
             [--with-eth --with-ipstack])

. $TE_BASE/engine/builder/te_functions
. $TE_BASE/engine/builder/te_ta_ssh_helper

define([TE_AGENT_BUILD], [
    if test -n "${$1}" -o -n "${$1_BUILD_HOST}" -o "${$1_BUILD}" = local ; then
        if ! te_is_in_list "${$1_TA_TYPE}" $TE_BS_PLATFORMS ; then
            te_ta_type_as_platform "$1"

            case "${$1_TA_TYPE}" in
                *aarch64*) TE_TA_HOST=aarch64-pc-linux ;;
                *64*) TE_TA_HOST=x86_64-pc-linux ;;
                *)    TE_TA_HOST=i386-pc-linux   ;;
            esac

            # Pre-checks for libbpf (XDP testing)
            if test ${$1_HEADERS_NUM} -lt 310 ; then
                export BPF_CFG=""
            else
                export BPF_CFG="--with-bpf"
            fi

            TE_AGENT_BUILD_PARMS=
            TE_AGENT_BUILD_CC=${$1_CC}
            TE_AGENT_BUILD_CFLAGS=${$1_CFLAGS}
            test -n "$TE_AGENT_BUILD_CC" && TE_AGENT_BUILD_CC="CC=$TE_AGENT_BUILD_CC"

            TE_PLATFORM_BUILD([${$1_TA_TYPE}], [])
            TE_PLATFORM([${$1_TA_TYPE}], [$TE_AGENT_BUILD_CC],
                        [$TE_AGENT_BUILD_CFLAGS -D_GNU_SOURCE],
                        [-D_GNU_SOURCE], [],
                        [logger_core tools conf_oid rpcxdr rpc_types asn ndn \
                         comm_net_agent loggerta rpctransport agentlib \
                         rpcserver rcfpch tad netconf rpcs_job ta_job \
                         ta_bpf],
                        [${$1_BUILD}])

            if test -n "$BPF_CFG" -a -n "$TE_LIBBPF_SRC" ; then
                TE_PLATFORM_EXT([libbpf], [${$1_TA_TYPE}], [${TE_LIBBPF_SRC}], [], [],
                                [export OBJDIR=\${PWD} && make -C \${EXT_SOURCES}/src],
                                [\${EXT_SOURCES}/src/bpf.h \
                                 \${EXT_SOURCES}/src/libbpf_common.h \
                                 \${EXT_SOURCES}/src/libbpf.h \
                                 \${EXT_SOURCES}/src/bpf_endian.h \
                                 \${EXT_SOURCES}/src/bpf_helper_defs.h \
                                 \${EXT_SOURCES}/src/bpf_helpers.h],
                                [libbpf.so], [], [], [bpf])
            fi

            TE_LIB_PARMS([tad], [${$1_TA_TYPE}], [],
                         [--with-eth --with-ipstack --with-packet-mmap-rx-ring \
                          --without-static-libc])

            TE_LIB_PARMS([rcfpch], [${$1_TA_TYPE}], [], [],
                         [], [], [])

            TE_LIB_PARMS([rpcxdr], [${$1_TA_TYPE}], [],
                         [--with-rpcdefs=tarpc_job.x.m4])

            TE_TA_TYPE([${$1_TA_TYPE}], [${$1_TA_TYPE}], [unix],
                       [--enable-pci \
                        --with-rcf-rpc \
                        --with-serialparse \
                        --without-static-libc \
                        --with-sfptpd --with-ntpd \
                        $BPF_CFG ],
                       [], [], [], [comm_net_agent ndn asn])

            TE_TA_APP([ta_rpcprovider], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [ta_rpcprovider], [], [],
                      [rpcserver rpcs_job ta_job agentlib rpcxdrta \
                       rpc_types rpctransport loggerta tools logger_core],
                      [\${EXT_SOURCES}/build.sh --extra-deps='libpcre'],
                      [ta_rpcs], [])

            TE_TA_APP([ta_core_watcher], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [], [], [], [], [],
                      [ta_core_watcher], [])

            if test -n "$BPF_CFG" ; then
                if test "$1" = "TE_IUT" ; then
                    TE_TA_APP([rss_bpf], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                              [${TE_BASE}/bpf], [], [], [],
                              [\${EXT_SOURCES}/build.sh --inst-dir=rss_bpf \
                              --progs=rxq_stats])
                fi
            fi

            if test -n "$BPF_CFG" -a -n "$TE_LIBBPF_SRC" ; then
                TE_TA_APP([libbpf], [${$1_TA_TYPE}],
                          [${$1_TA_TYPE}], [.], [], [], [],
                          [cp \${TE_PREFIX}/lib/libbpf.so
                           \${TE_AGENTS_INST}/${$1_TA_TYPE}/])
            fi

            if test -n "${$1_SFC_LINUX_NET_SRC}"; then
                TE_TA_APP([sfc_linux_net], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${$1_SFC_LINUX_NET_SRC}], [], [], [],
                          [${SF_TS_CONFDIR}/scripts/build-sfc-linux-net ${$1_SFC_MAKE_ARGS}])
            fi
            if test -n "${$1_CNS_AUX_BUS_SRC}"; then
                TE_TA_APP([cns_auxiliary_bus], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${$1_CNS_AUX_BUS_SRC}], [], [], [],
                          [${SF_TS_CONFDIR}/scripts/build-cns-auxiliary-bus ${$1_X3_MAKE_ARGS}])
            fi
            if test -n "${$1_X3_NET_LINUX_SRC}"; then
                TE_TA_APP([x3_net_linux], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${$1_X3_NET_LINUX_SRC}], [], [], [],
                          [${SF_TS_CONFDIR}/scripts/build-x3-net-linux ${$1_X3_MAKE_ARGS}])
            fi
        fi
    fi
])

TE_AGENT_BUILD([TE_IUT])
TE_AGENT_BUILD([TE_TST1])
TE_AGENT_BUILD([TE_HYPERVISOR])
TE_AGENT_BUILD([TE_LOG_LISTENER])
